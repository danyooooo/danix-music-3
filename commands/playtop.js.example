const { ApplicationCommandOptionType } = require('discord.js');
const { QueryType, usePlayer } = require('discord-player');
const { VoiceChannel } = require('../client/VoiceChannel');
const colors = require('../colors.json');

module.exports = {
  name: 'playtop',
  description: 'Play a song before the next in your channel.',
  options: [
    {
      name: 'query',
      type: ApplicationCommandOptionType.String,
      description: 'The song you want to play',
      required: true,
    },
  ],
  async execute(interaction, player) {
    try {
      if (!VoiceChannel(interaction)) return;

      await interaction.deferReply();

      const player = usePlayer();
      const query = interaction.options.getString('query');

      const searchResult = await player
        .search(query, {
          requestedBy: interaction.user,
          searchEngine: QueryType.AUTO,
        })
        .catch(() => {});
      if (!searchResult || !searchResult.tracks.length)
        return void interaction.followUp({
          embeds: [
            {
              description: 'No results were found!',
              color: 0xff0000,
            },
          ],
          flags: MessageFlags.Ephemeral,
          
          //content: 'No results were found!'
        });

      const queue = await player.createQueue(interaction.guild, {
        ytdlOptions: {
        quality: "highest",
        filter: "audioonly",
        highWaterMark: 1 << 25,
        dlChunkSize: 0,
      },
        metadata: interaction.channel,
      });

      try {
        if (!queue.connection) await queue.connect(interaction.member.voice.channel);
      } catch {
        void player.deleteQueue(interaction.guildId);
        return void interaction.followUp({
          embeds: [
            {
              description: 'Could not join your voice channel!',
              color: 0xff0000,
            },
          ],
          flags: MessageFlags.Ephemeral,
          
          //content: 'Could not join your voice channel!',
        });
      }

      await interaction.followUp({
        content: `Loading your ${searchResult.playlist ? 'playlist' : 'track'}...`,
      });
      searchResult.playlist ? queue.insert(searchResult.tracks, 0) : queue.insert(searchResult.tracks[0], 0);
      if (!queue.playing) await queue.play();
    } catch (error) {
      console.log(error);
      interaction.followUp({
        embeds: [
          {
            description: 'There was an error trying to execute that command: ' + error.message,
            color: 0xff0000,
          },
        ],
        flags: MessageFlags.Ephemeral,
        
        //content: 'There was an error trying to execute that command: ' + error.message,
      });
    }
  },
};
